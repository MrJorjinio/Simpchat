// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpchatWeb.Services.Db.Contexts.Default;

#nullable disable

namespace SimpchatWeb.Migrations
{
    [DbContext(typeof(SimpchatDbContext))]
    [Migration("20250925183151_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "chat_types", new[] { "conversation", "group", "channel" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "friendships_status", new[] { "pending", "accepted", "blocked" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.ChannelSubscriber", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelsSubscribers");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.ConversationMember", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationsMembers");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Friendship", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("FormedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("ConversationId")
                        .IsUnique();

                    b.HasIndex("FriendId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupParticipant", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupsParticipants");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.HasKey("Id");

                    b.ToTable("GroupRoles");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupRolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("character varying(85)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupRolesPermissions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupUserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId", "PermissionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupsUsersPermissions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupUserRole", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupId", "RoleId", "UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupsUsersRoles");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.MessageReaction", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MessageId", "ReactionId", "UserId");

                    b.HasIndex("ReactionId");

                    b.HasIndex("UserId");

                    b.ToTable("MessagesReactions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("ConnectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTimeOffset>("DisconnectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("character varying(85)");

                    b.Property<DateTimeOffset>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("Channels")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithMany("Channels")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.ChannelSubscriber", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", "Channel")
                        .WithMany("Subscribers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("ChannelsSubscribedTo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Conversation", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithMany("Conversations")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.ConversationMember", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Conversation", "Conversation")
                        .WithMany("Members")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Friendship", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Conversation", "Conversation")
                        .WithOne("Friendship")
                        .HasForeignKey("SimpchatWeb.Services.Db.Contexts.Default.Entities.Friendship", "ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "Friend")
                        .WithMany("SentFriendships")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("ReceivedFriendships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "UserCreated")
                        .WithMany("Groups")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithMany("Groups")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupParticipant", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", "Group")
                        .WithMany("Participants")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("GroupsParticipated")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupRolePermission", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupRole", "RoleBelongTo")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleBelongTo");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupUserPermission", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", "Group")
                        .WithMany("ParticipantsPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupRolePermission", "Permission")
                        .WithMany("UsersAppliedTo")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupUserRole", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", "Group")
                        .WithMany("ParticipantsRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupRole", "Role")
                        .WithMany("UsersAppliedTo")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("GroupsRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Message", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.MessageReaction", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Reaction", "Reaction")
                        .WithMany("MessagesAppliedTo")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("MessageReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Reaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Session", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Conversations");

                    b.Navigation("Groups");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Conversation", b =>
                {
                    b.Navigation("Friendship")
                        .IsRequired();

                    b.Navigation("Members");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("ParticipantsPermissions");

                    b.Navigation("ParticipantsRoles");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UsersAppliedTo");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.GroupRolePermission", b =>
                {
                    b.Navigation("UsersAppliedTo");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Message", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Reaction", b =>
                {
                    b.Navigation("MessagesAppliedTo");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("ChannelsSubscribedTo");

                    b.Navigation("GroupPermissions");

                    b.Navigation("Groups");

                    b.Navigation("GroupsParticipated");

                    b.Navigation("GroupsRoles");

                    b.Navigation("MessageReactions");

                    b.Navigation("Messages");

                    b.Navigation("ReceivedFriendships");

                    b.Navigation("SentFriendships");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
