// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Simpchat.Infrastructure.Persistence;

#nullable disable

namespace Simpchat.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SimpchatDbContext))]
    partial class SimpchatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Simpchat.Domain.Entities.Channels.ChannelSubscriber", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SubscribedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelsSubscribers");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.ChatBan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("From")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTimeOffset>("To")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatsBans");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReplyId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.MessageReaction", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MessageId", "ReactionId", "UserId");

                    b.HasIndex("ReactionId");

                    b.HasIndex("UserId");

                    b.ToTable("MessagesReactions");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Groups.GroupMember", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupsMembers");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Simpchat.Infrastructure.Identity.GlobalPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("character varying(85)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GlobalPermissions");
                });

            modelBuilder.Entity("Simpchat.Infrastructure.Identity.GlobalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GlobalRoles");
                });

            modelBuilder.Entity("Simpchat.Infrastructure.Identity.GlobalRolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GlobalRolesPermissions");
                });

            modelBuilder.Entity("Simpchat.Infrastructure.Identity.GlobalRoleUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersGlobalRoles");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("PrivacyType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Public");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.ChatPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("character varying(85)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ChatPermissions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.ChatUserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ChatId", "PermissionId");

                    b.HasIndex("ChatId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ChatsUsersPermissions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId2")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id", "UserId1", "UserId2");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("ChatMemberAddPermissionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("character varying(85)")
                        .HasDefaultValue("");

                    b.Property<DateTimeOffset>("LastSeen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Channels.ChannelSubscriber", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", "Channel")
                        .WithMany("Subscribers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("SubscribedChannels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.ChatBan", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithMany("Bans")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("ChatBans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.Message", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpchat.Domain.Entities.Chats.Message", "ReplyTo")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyId");

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("ReplyTo");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.MessageReaction", b =>
                {
                    b.HasOne("Simpchat.Domain.Entities.Chats.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpchat.Domain.Entities.Chats.Reaction", "Reaction")
                        .WithMany("MessagesAppliedTo")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("MessageReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Reaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Groups.GroupMember", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("ParticipatedGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Simpchat.Infrastructure.Identity.GlobalRolePermission", b =>
                {
                    b.HasOne("Simpchat.Infrastructure.Identity.GlobalPermission", "Permission")
                        .WithMany("GlobalRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simpchat.Infrastructure.Identity.GlobalRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Simpchat.Infrastructure.Identity.GlobalRoleUser", b =>
                {
                    b.HasOne("Simpchat.Infrastructure.Identity.GlobalRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("GlobalRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "Owner")
                        .WithMany("CreatedChannels")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithOne("Channel")
                        .HasForeignKey("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.ChatUserPermission", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithMany("ParticipantsPermissions")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.ChatPermission", "Permission")
                        .WithMany("UsersAppliedTo")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User")
                        .WithMany("ChatPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Conversation", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithOne("Conversation")
                        .HasForeignKey("SimpchatWeb.Services.Db.Contexts.Default.Entities.Conversation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User1")
                        .WithMany("ConversationsAsUser1")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "User2")
                        .WithMany("ConversationsAsUser2")
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", b =>
                {
                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "Owner")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", "Chat")
                        .WithOne("Group")
                        .HasForeignKey("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Notification", b =>
                {
                    b.HasOne("Simpchat.Domain.Entities.Chats.Message", "Message")
                        .WithMany("Notifications")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.Message", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Simpchat.Domain.Entities.Chats.Reaction", b =>
                {
                    b.Navigation("MessagesAppliedTo");
                });

            modelBuilder.Entity("Simpchat.Infrastructure.Identity.GlobalPermission", b =>
                {
                    b.Navigation("GlobalRoles");
                });

            modelBuilder.Entity("Simpchat.Infrastructure.Identity.GlobalRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Channel", b =>
                {
                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Chat", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("Channel");

                    b.Navigation("Conversation");

                    b.Navigation("Group");

                    b.Navigation("Messages");

                    b.Navigation("ParticipantsPermissions");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.ChatPermission", b =>
                {
                    b.Navigation("UsersAppliedTo");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.Group", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("SimpchatWeb.Services.Db.Contexts.Default.Entities.User", b =>
                {
                    b.Navigation("ChatBans");

                    b.Navigation("ChatPermissions");

                    b.Navigation("ConversationsAsUser1");

                    b.Navigation("ConversationsAsUser2");

                    b.Navigation("CreatedChannels");

                    b.Navigation("CreatedGroups");

                    b.Navigation("GlobalRoles");

                    b.Navigation("MessageReactions");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("ParticipatedGroups");

                    b.Navigation("SubscribedChannels");
                });
#pragma warning restore 612, 618
        }
    }
}
